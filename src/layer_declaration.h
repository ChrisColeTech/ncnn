// Layer Declaration header
//
// This file is auto-generated by cmake, don't edit it.

#include "layer/concat.h"
#include "layer/vulkan/concat_vulkan.h"
#include "layer/x86/concat_x86.h"
namespace ncnn {
class Concat_final : virtual public Concat, virtual public Concat_vulkan, virtual public Concat_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Concat::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Concat_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Concat_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Concat_x86::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Concat_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Concat::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Concat_final)
} // namespace ncnn

#include "layer/concat.h"
#include "layer/vulkan/concat_vulkan.h"
#include "layer/x86/concat_x86_avx512.h"
namespace ncnn {
class Concat_final_avx512 : virtual public Concat, virtual public Concat_vulkan, virtual public Concat_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Concat::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Concat_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Concat_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Concat_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Concat_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Concat::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Concat_final_avx512)
} // namespace ncnn

#include "layer/concat.h"
#include "layer/vulkan/concat_vulkan.h"
#include "layer/x86/concat_x86_fma.h"
namespace ncnn {
class Concat_final_fma : virtual public Concat, virtual public Concat_vulkan, virtual public Concat_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Concat::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Concat_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Concat_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Concat_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Concat_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Concat::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Concat_final_fma)
} // namespace ncnn

#include "layer/concat.h"
#include "layer/vulkan/concat_vulkan.h"
#include "layer/x86/concat_x86_avx.h"
namespace ncnn {
class Concat_final_avx : virtual public Concat, virtual public Concat_vulkan, virtual public Concat_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Concat::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Concat_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Concat_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Concat_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Concat_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Concat::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Concat_final_avx)
} // namespace ncnn

#include "layer/convolution.h"
#include "layer/vulkan/convolution_vulkan.h"
#include "layer/x86/convolution_x86.h"
namespace ncnn {
class Convolution_final : virtual public Convolution, virtual public Convolution_vulkan, virtual public Convolution_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Convolution::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Convolution_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Convolution_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Convolution_x86::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Convolution_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Convolution::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Convolution_final)
} // namespace ncnn

#include "layer/convolution.h"
#include "layer/vulkan/convolution_vulkan.h"
#include "layer/x86/convolution_x86_avx512.h"
namespace ncnn {
class Convolution_final_avx512 : virtual public Convolution, virtual public Convolution_vulkan, virtual public Convolution_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Convolution::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Convolution_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Convolution_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Convolution_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Convolution_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Convolution::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Convolution_final_avx512)
} // namespace ncnn

#include "layer/convolution.h"
#include "layer/vulkan/convolution_vulkan.h"
#include "layer/x86/convolution_x86_fma.h"
namespace ncnn {
class Convolution_final_fma : virtual public Convolution, virtual public Convolution_vulkan, virtual public Convolution_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Convolution::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Convolution_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Convolution_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Convolution_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Convolution_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Convolution::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Convolution_final_fma)
} // namespace ncnn

#include "layer/convolution.h"
#include "layer/vulkan/convolution_vulkan.h"
#include "layer/x86/convolution_x86_avx.h"
namespace ncnn {
class Convolution_final_avx : virtual public Convolution, virtual public Convolution_vulkan, virtual public Convolution_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Convolution::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Convolution_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Convolution_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Convolution_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Convolution_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Convolution::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Convolution_final_avx)
} // namespace ncnn

#include "layer/crop.h"
#include "layer/vulkan/crop_vulkan.h"
#include "layer/x86/crop_x86.h"
namespace ncnn {
class Crop_final : virtual public Crop, virtual public Crop_vulkan, virtual public Crop_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Crop::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Crop_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Crop_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Crop_x86::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Crop_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Crop::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Crop_final)
} // namespace ncnn

#include "layer/crop.h"
#include "layer/vulkan/crop_vulkan.h"
#include "layer/x86/crop_x86_avx512.h"
namespace ncnn {
class Crop_final_avx512 : virtual public Crop, virtual public Crop_vulkan, virtual public Crop_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Crop::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Crop_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Crop_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Crop_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Crop_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Crop::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Crop_final_avx512)
} // namespace ncnn

#include "layer/crop.h"
#include "layer/vulkan/crop_vulkan.h"
#include "layer/x86/crop_x86_fma.h"
namespace ncnn {
class Crop_final_fma : virtual public Crop, virtual public Crop_vulkan, virtual public Crop_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Crop::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Crop_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Crop_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Crop_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Crop_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Crop::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Crop_final_fma)
} // namespace ncnn

#include "layer/crop.h"
#include "layer/vulkan/crop_vulkan.h"
#include "layer/x86/crop_x86_avx.h"
namespace ncnn {
class Crop_final_avx : virtual public Crop, virtual public Crop_vulkan, virtual public Crop_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Crop::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Crop_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Crop_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Crop_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Crop_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Crop::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Crop_final_avx)
} // namespace ncnn

#include "layer/deconvolution.h"
#include "layer/vulkan/deconvolution_vulkan.h"
#include "layer/x86/deconvolution_x86.h"
namespace ncnn {
class Deconvolution_final : virtual public Deconvolution, virtual public Deconvolution_vulkan, virtual public Deconvolution_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Deconvolution::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Deconvolution_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Deconvolution_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Deconvolution_x86::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Deconvolution_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Deconvolution::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Deconvolution_final)
} // namespace ncnn

#include "layer/deconvolution.h"
#include "layer/vulkan/deconvolution_vulkan.h"
#include "layer/x86/deconvolution_x86_avx512.h"
namespace ncnn {
class Deconvolution_final_avx512 : virtual public Deconvolution, virtual public Deconvolution_vulkan, virtual public Deconvolution_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Deconvolution::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Deconvolution_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Deconvolution_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Deconvolution_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Deconvolution_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Deconvolution::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Deconvolution_final_avx512)
} // namespace ncnn

#include "layer/deconvolution.h"
#include "layer/vulkan/deconvolution_vulkan.h"
#include "layer/x86/deconvolution_x86_fma.h"
namespace ncnn {
class Deconvolution_final_fma : virtual public Deconvolution, virtual public Deconvolution_vulkan, virtual public Deconvolution_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Deconvolution::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Deconvolution_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Deconvolution_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Deconvolution_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Deconvolution_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Deconvolution::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Deconvolution_final_fma)
} // namespace ncnn

#include "layer/deconvolution.h"
#include "layer/vulkan/deconvolution_vulkan.h"
#include "layer/x86/deconvolution_x86_avx.h"
namespace ncnn {
class Deconvolution_final_avx : virtual public Deconvolution, virtual public Deconvolution_vulkan, virtual public Deconvolution_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Deconvolution::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Deconvolution_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Deconvolution_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Deconvolution_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Deconvolution_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Deconvolution::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Deconvolution_final_avx)
} // namespace ncnn

#include "layer/flatten.h"
#include "layer/vulkan/flatten_vulkan.h"
#include "layer/x86/flatten_x86.h"
namespace ncnn {
class Flatten_final : virtual public Flatten, virtual public Flatten_vulkan, virtual public Flatten_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Flatten::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Flatten_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Flatten_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Flatten_x86::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Flatten_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Flatten::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Flatten_final)
} // namespace ncnn

#include "layer/flatten.h"
#include "layer/vulkan/flatten_vulkan.h"
#include "layer/x86/flatten_x86_avx512.h"
namespace ncnn {
class Flatten_final_avx512 : virtual public Flatten, virtual public Flatten_vulkan, virtual public Flatten_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Flatten::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Flatten_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Flatten_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Flatten_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Flatten_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Flatten::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Flatten_final_avx512)
} // namespace ncnn

#include "layer/flatten.h"
#include "layer/vulkan/flatten_vulkan.h"
#include "layer/x86/flatten_x86_fma.h"
namespace ncnn {
class Flatten_final_fma : virtual public Flatten, virtual public Flatten_vulkan, virtual public Flatten_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Flatten::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Flatten_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Flatten_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Flatten_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Flatten_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Flatten::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Flatten_final_fma)
} // namespace ncnn

#include "layer/flatten.h"
#include "layer/vulkan/flatten_vulkan.h"
#include "layer/x86/flatten_x86_avx.h"
namespace ncnn {
class Flatten_final_avx : virtual public Flatten, virtual public Flatten_vulkan, virtual public Flatten_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Flatten::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Flatten_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Flatten_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Flatten_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Flatten_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Flatten::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Flatten_final_avx)
} // namespace ncnn

#include "layer/innerproduct.h"
#include "layer/vulkan/innerproduct_vulkan.h"
#include "layer/x86/innerproduct_x86.h"
namespace ncnn {
class InnerProduct_final : virtual public InnerProduct, virtual public InnerProduct_vulkan, virtual public InnerProduct_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = InnerProduct::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = InnerProduct_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = InnerProduct_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = InnerProduct_x86::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = InnerProduct_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = InnerProduct::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(InnerProduct_final)
} // namespace ncnn

#include "layer/innerproduct.h"
#include "layer/vulkan/innerproduct_vulkan.h"
#include "layer/x86/innerproduct_x86_avx512.h"
namespace ncnn {
class InnerProduct_final_avx512 : virtual public InnerProduct, virtual public InnerProduct_vulkan, virtual public InnerProduct_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = InnerProduct::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = InnerProduct_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = InnerProduct_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = InnerProduct_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = InnerProduct_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = InnerProduct::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(InnerProduct_final_avx512)
} // namespace ncnn

#include "layer/innerproduct.h"
#include "layer/vulkan/innerproduct_vulkan.h"
#include "layer/x86/innerproduct_x86_fma.h"
namespace ncnn {
class InnerProduct_final_fma : virtual public InnerProduct, virtual public InnerProduct_vulkan, virtual public InnerProduct_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = InnerProduct::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = InnerProduct_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = InnerProduct_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = InnerProduct_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = InnerProduct_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = InnerProduct::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(InnerProduct_final_fma)
} // namespace ncnn

#include "layer/innerproduct.h"
#include "layer/vulkan/innerproduct_vulkan.h"
#include "layer/x86/innerproduct_x86_avx.h"
namespace ncnn {
class InnerProduct_final_avx : virtual public InnerProduct, virtual public InnerProduct_vulkan, virtual public InnerProduct_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = InnerProduct::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = InnerProduct_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = InnerProduct_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = InnerProduct_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = InnerProduct_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = InnerProduct::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(InnerProduct_final_avx)
} // namespace ncnn

#include "layer/input.h"
namespace ncnn {
class Input_final : virtual public Input
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Input::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Input::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Input_final)
} // namespace ncnn

#include "layer/pooling.h"
#include "layer/vulkan/pooling_vulkan.h"
#include "layer/x86/pooling_x86.h"
namespace ncnn {
class Pooling_final : virtual public Pooling, virtual public Pooling_vulkan, virtual public Pooling_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Pooling::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Pooling_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Pooling_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Pooling_x86::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Pooling_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Pooling::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Pooling_final)
} // namespace ncnn

#include "layer/pooling.h"
#include "layer/vulkan/pooling_vulkan.h"
#include "layer/x86/pooling_x86_avx512.h"
namespace ncnn {
class Pooling_final_avx512 : virtual public Pooling, virtual public Pooling_vulkan, virtual public Pooling_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Pooling::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Pooling_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Pooling_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Pooling_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Pooling_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Pooling::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Pooling_final_avx512)
} // namespace ncnn

#include "layer/pooling.h"
#include "layer/vulkan/pooling_vulkan.h"
#include "layer/x86/pooling_x86_fma.h"
namespace ncnn {
class Pooling_final_fma : virtual public Pooling, virtual public Pooling_vulkan, virtual public Pooling_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Pooling::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Pooling_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Pooling_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Pooling_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Pooling_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Pooling::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Pooling_final_fma)
} // namespace ncnn

#include "layer/pooling.h"
#include "layer/vulkan/pooling_vulkan.h"
#include "layer/x86/pooling_x86_avx.h"
namespace ncnn {
class Pooling_final_avx : virtual public Pooling, virtual public Pooling_vulkan, virtual public Pooling_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Pooling::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Pooling_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Pooling_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Pooling_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Pooling_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Pooling::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Pooling_final_avx)
} // namespace ncnn

#include "layer/relu.h"
#include "layer/vulkan/relu_vulkan.h"
#include "layer/x86/relu_x86.h"
namespace ncnn {
class ReLU_final : virtual public ReLU, virtual public ReLU_vulkan, virtual public ReLU_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = ReLU::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = ReLU_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = ReLU_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = ReLU_x86::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = ReLU_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = ReLU::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(ReLU_final)
} // namespace ncnn

#include "layer/relu.h"
#include "layer/vulkan/relu_vulkan.h"
#include "layer/x86/relu_x86_avx512.h"
namespace ncnn {
class ReLU_final_avx512 : virtual public ReLU, virtual public ReLU_vulkan, virtual public ReLU_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = ReLU::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = ReLU_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = ReLU_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = ReLU_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = ReLU_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = ReLU::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(ReLU_final_avx512)
} // namespace ncnn

#include "layer/relu.h"
#include "layer/vulkan/relu_vulkan.h"
#include "layer/x86/relu_x86_fma.h"
namespace ncnn {
class ReLU_final_fma : virtual public ReLU, virtual public ReLU_vulkan, virtual public ReLU_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = ReLU::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = ReLU_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = ReLU_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = ReLU_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = ReLU_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = ReLU::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(ReLU_final_fma)
} // namespace ncnn

#include "layer/relu.h"
#include "layer/vulkan/relu_vulkan.h"
#include "layer/x86/relu_x86_avx.h"
namespace ncnn {
class ReLU_final_avx : virtual public ReLU, virtual public ReLU_vulkan, virtual public ReLU_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = ReLU::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = ReLU_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = ReLU_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = ReLU_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = ReLU_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = ReLU::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(ReLU_final_avx)
} // namespace ncnn

#include "layer/reshape.h"
#include "layer/vulkan/reshape_vulkan.h"
#include "layer/x86/reshape_x86.h"
namespace ncnn {
class Reshape_final : virtual public Reshape, virtual public Reshape_vulkan, virtual public Reshape_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Reshape::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Reshape_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Reshape_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Reshape_x86::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Reshape_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Reshape::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Reshape_final)
} // namespace ncnn

#include "layer/reshape.h"
#include "layer/vulkan/reshape_vulkan.h"
#include "layer/x86/reshape_x86_avx512.h"
namespace ncnn {
class Reshape_final_avx512 : virtual public Reshape, virtual public Reshape_vulkan, virtual public Reshape_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Reshape::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Reshape_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Reshape_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Reshape_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Reshape_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Reshape::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Reshape_final_avx512)
} // namespace ncnn

#include "layer/reshape.h"
#include "layer/vulkan/reshape_vulkan.h"
#include "layer/x86/reshape_x86_fma.h"
namespace ncnn {
class Reshape_final_fma : virtual public Reshape, virtual public Reshape_vulkan, virtual public Reshape_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Reshape::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Reshape_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Reshape_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Reshape_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Reshape_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Reshape::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Reshape_final_fma)
} // namespace ncnn

#include "layer/reshape.h"
#include "layer/vulkan/reshape_vulkan.h"
#include "layer/x86/reshape_x86_avx.h"
namespace ncnn {
class Reshape_final_avx : virtual public Reshape, virtual public Reshape_vulkan, virtual public Reshape_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Reshape::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Reshape_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Reshape_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Reshape_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Reshape_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Reshape::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Reshape_final_avx)
} // namespace ncnn

#include "layer/split.h"
namespace ncnn {
class Split_final : virtual public Split
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Split::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Split::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Split_final)
} // namespace ncnn

#include "layer/binaryop.h"
#include "layer/vulkan/binaryop_vulkan.h"
#include "layer/x86/binaryop_x86.h"
namespace ncnn {
class BinaryOp_final : virtual public BinaryOp, virtual public BinaryOp_vulkan, virtual public BinaryOp_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = BinaryOp::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = BinaryOp_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = BinaryOp_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = BinaryOp_x86::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = BinaryOp_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = BinaryOp::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(BinaryOp_final)
} // namespace ncnn

#include "layer/binaryop.h"
#include "layer/vulkan/binaryop_vulkan.h"
#include "layer/x86/binaryop_x86_avx512.h"
namespace ncnn {
class BinaryOp_final_avx512 : virtual public BinaryOp, virtual public BinaryOp_vulkan, virtual public BinaryOp_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = BinaryOp::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = BinaryOp_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = BinaryOp_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = BinaryOp_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = BinaryOp_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = BinaryOp::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(BinaryOp_final_avx512)
} // namespace ncnn

#include "layer/binaryop.h"
#include "layer/vulkan/binaryop_vulkan.h"
#include "layer/x86/binaryop_x86_fma.h"
namespace ncnn {
class BinaryOp_final_fma : virtual public BinaryOp, virtual public BinaryOp_vulkan, virtual public BinaryOp_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = BinaryOp::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = BinaryOp_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = BinaryOp_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = BinaryOp_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = BinaryOp_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = BinaryOp::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(BinaryOp_final_fma)
} // namespace ncnn

#include "layer/binaryop.h"
#include "layer/vulkan/binaryop_vulkan.h"
#include "layer/x86/binaryop_x86_avx.h"
namespace ncnn {
class BinaryOp_final_avx : virtual public BinaryOp, virtual public BinaryOp_vulkan, virtual public BinaryOp_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = BinaryOp::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = BinaryOp_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = BinaryOp_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = BinaryOp_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = BinaryOp_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = BinaryOp::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(BinaryOp_final_avx)
} // namespace ncnn

#include "layer/unaryop.h"
#include "layer/vulkan/unaryop_vulkan.h"
#include "layer/x86/unaryop_x86.h"
namespace ncnn {
class UnaryOp_final : virtual public UnaryOp, virtual public UnaryOp_vulkan, virtual public UnaryOp_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = UnaryOp::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = UnaryOp_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = UnaryOp_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = UnaryOp_x86::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = UnaryOp_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = UnaryOp::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(UnaryOp_final)
} // namespace ncnn

#include "layer/unaryop.h"
#include "layer/vulkan/unaryop_vulkan.h"
#include "layer/x86/unaryop_x86_avx512.h"
namespace ncnn {
class UnaryOp_final_avx512 : virtual public UnaryOp, virtual public UnaryOp_vulkan, virtual public UnaryOp_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = UnaryOp::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = UnaryOp_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = UnaryOp_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = UnaryOp_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = UnaryOp_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = UnaryOp::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(UnaryOp_final_avx512)
} // namespace ncnn

#include "layer/unaryop.h"
#include "layer/vulkan/unaryop_vulkan.h"
#include "layer/x86/unaryop_x86_fma.h"
namespace ncnn {
class UnaryOp_final_fma : virtual public UnaryOp, virtual public UnaryOp_vulkan, virtual public UnaryOp_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = UnaryOp::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = UnaryOp_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = UnaryOp_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = UnaryOp_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = UnaryOp_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = UnaryOp::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(UnaryOp_final_fma)
} // namespace ncnn

#include "layer/unaryop.h"
#include "layer/vulkan/unaryop_vulkan.h"
#include "layer/x86/unaryop_x86_avx.h"
namespace ncnn {
class UnaryOp_final_avx : virtual public UnaryOp, virtual public UnaryOp_vulkan, virtual public UnaryOp_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = UnaryOp::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = UnaryOp_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = UnaryOp_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = UnaryOp_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = UnaryOp_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = UnaryOp::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(UnaryOp_final_avx)
} // namespace ncnn

#include "layer/padding.h"
#include "layer/vulkan/padding_vulkan.h"
#include "layer/x86/padding_x86.h"
namespace ncnn {
class Padding_final : virtual public Padding, virtual public Padding_vulkan, virtual public Padding_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Padding::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Padding_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Padding_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Padding_x86::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Padding_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Padding::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Padding_final)
} // namespace ncnn

#include "layer/padding.h"
#include "layer/vulkan/padding_vulkan.h"
#include "layer/x86/padding_x86_avx512.h"
namespace ncnn {
class Padding_final_avx512 : virtual public Padding, virtual public Padding_vulkan, virtual public Padding_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Padding::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Padding_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Padding_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Padding_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Padding_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Padding::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Padding_final_avx512)
} // namespace ncnn

#include "layer/padding.h"
#include "layer/vulkan/padding_vulkan.h"
#include "layer/x86/padding_x86_fma.h"
namespace ncnn {
class Padding_final_fma : virtual public Padding, virtual public Padding_vulkan, virtual public Padding_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Padding::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Padding_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Padding_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Padding_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Padding_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Padding::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Padding_final_fma)
} // namespace ncnn

#include "layer/padding.h"
#include "layer/vulkan/padding_vulkan.h"
#include "layer/x86/padding_x86_avx.h"
namespace ncnn {
class Padding_final_avx : virtual public Padding, virtual public Padding_vulkan, virtual public Padding_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Padding::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Padding_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Padding_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Padding_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Padding_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Padding::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Padding_final_avx)
} // namespace ncnn

#include "layer/interp.h"
#include "layer/vulkan/interp_vulkan.h"
#include "layer/x86/interp_x86.h"
namespace ncnn {
class Interp_final : virtual public Interp, virtual public Interp_vulkan, virtual public Interp_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Interp::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Interp_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Interp_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Interp_x86::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Interp_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Interp::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Interp_final)
} // namespace ncnn

#include "layer/interp.h"
#include "layer/vulkan/interp_vulkan.h"
#include "layer/x86/interp_x86_avx512.h"
namespace ncnn {
class Interp_final_avx512 : virtual public Interp, virtual public Interp_vulkan, virtual public Interp_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Interp::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Interp_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Interp_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Interp_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Interp_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Interp::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Interp_final_avx512)
} // namespace ncnn

#include "layer/interp.h"
#include "layer/vulkan/interp_vulkan.h"
#include "layer/x86/interp_x86_fma.h"
namespace ncnn {
class Interp_final_fma : virtual public Interp, virtual public Interp_vulkan, virtual public Interp_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Interp::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Interp_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Interp_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Interp_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Interp_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Interp::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Interp_final_fma)
} // namespace ncnn

#include "layer/interp.h"
#include "layer/vulkan/interp_vulkan.h"
#include "layer/x86/interp_x86_avx.h"
namespace ncnn {
class Interp_final_avx : virtual public Interp, virtual public Interp_vulkan, virtual public Interp_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Interp::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Interp_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Interp_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Interp_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Interp_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Interp::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Interp_final_avx)
} // namespace ncnn

#include "layer/packing.h"
#include "layer/vulkan/packing_vulkan.h"
#include "layer/x86/packing_x86.h"
namespace ncnn {
class Packing_final : virtual public Packing, virtual public Packing_vulkan, virtual public Packing_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Packing::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Packing_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Packing_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Packing_x86::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Packing_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Packing::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Packing_final)
} // namespace ncnn

#include "layer/packing.h"
#include "layer/vulkan/packing_vulkan.h"
#include "layer/x86/packing_x86_avx512.h"
namespace ncnn {
class Packing_final_avx512 : virtual public Packing, virtual public Packing_vulkan, virtual public Packing_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Packing::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Packing_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Packing_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Packing_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Packing_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Packing::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Packing_final_avx512)
} // namespace ncnn

#include "layer/packing.h"
#include "layer/vulkan/packing_vulkan.h"
#include "layer/x86/packing_x86_fma.h"
namespace ncnn {
class Packing_final_fma : virtual public Packing, virtual public Packing_vulkan, virtual public Packing_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Packing::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Packing_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Packing_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Packing_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Packing_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Packing::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Packing_final_fma)
} // namespace ncnn

#include "layer/packing.h"
#include "layer/vulkan/packing_vulkan.h"
#include "layer/x86/packing_x86_avx.h"
namespace ncnn {
class Packing_final_avx : virtual public Packing, virtual public Packing_vulkan, virtual public Packing_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Packing::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Packing_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Packing_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Packing_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Packing_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Packing::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Packing_final_avx)
} // namespace ncnn

#include "layer/cast.h"
#include "layer/vulkan/cast_vulkan.h"
#include "layer/x86/cast_x86.h"
namespace ncnn {
class Cast_final : virtual public Cast, virtual public Cast_vulkan, virtual public Cast_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Cast::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Cast_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Cast_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Cast_x86::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Cast_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Cast::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Cast_final)
} // namespace ncnn

#include "layer/cast.h"
#include "layer/vulkan/cast_vulkan.h"
#include "layer/x86/cast_x86_avx512.h"
namespace ncnn {
class Cast_final_avx512 : virtual public Cast, virtual public Cast_vulkan, virtual public Cast_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Cast::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Cast_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Cast_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Cast_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Cast_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Cast::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Cast_final_avx512)
} // namespace ncnn

#include "layer/cast.h"
#include "layer/vulkan/cast_vulkan.h"
#include "layer/x86/cast_x86_fma.h"
namespace ncnn {
class Cast_final_fma : virtual public Cast, virtual public Cast_vulkan, virtual public Cast_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Cast::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Cast_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Cast_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Cast_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Cast_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Cast::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Cast_final_fma)
} // namespace ncnn

#include "layer/cast.h"
#include "layer/vulkan/cast_vulkan.h"
#include "layer/x86/cast_x86_avx.h"
namespace ncnn {
class Cast_final_avx : virtual public Cast, virtual public Cast_vulkan, virtual public Cast_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Cast::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Cast_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Cast_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Cast_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Cast_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Cast::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Cast_final_avx)
} // namespace ncnn

#include "layer/gemm.h"
#include "layer/vulkan/gemm_vulkan.h"
#include "layer/x86/gemm_x86.h"
namespace ncnn {
class Gemm_final : virtual public Gemm, virtual public Gemm_vulkan, virtual public Gemm_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Gemm::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Gemm_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Gemm_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Gemm_x86::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Gemm_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Gemm::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Gemm_final)
} // namespace ncnn

#include "layer/gemm.h"
#include "layer/vulkan/gemm_vulkan.h"
#include "layer/x86/gemm_x86_avx512.h"
namespace ncnn {
class Gemm_final_avx512 : virtual public Gemm, virtual public Gemm_vulkan, virtual public Gemm_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Gemm::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Gemm_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Gemm_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Gemm_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Gemm_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Gemm::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Gemm_final_avx512)
} // namespace ncnn

#include "layer/gemm.h"
#include "layer/vulkan/gemm_vulkan.h"
#include "layer/x86/gemm_x86_fma.h"
namespace ncnn {
class Gemm_final_fma : virtual public Gemm, virtual public Gemm_vulkan, virtual public Gemm_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Gemm::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Gemm_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Gemm_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Gemm_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Gemm_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Gemm::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Gemm_final_fma)
} // namespace ncnn

#include "layer/gemm.h"
#include "layer/vulkan/gemm_vulkan.h"
#include "layer/x86/gemm_x86_avx.h"
namespace ncnn {
class Gemm_final_avx : virtual public Gemm, virtual public Gemm_vulkan, virtual public Gemm_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Gemm::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Gemm_vulkan::create_pipeline(opt); if (ret) return ret; }
        { int ret = Gemm_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Gemm_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Gemm_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Gemm::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Gemm_final_avx)
} // namespace ncnn

#include "layer/glu.h"
namespace ncnn {
class GLU_final : virtual public GLU
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = GLU::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = GLU::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(GLU_final)
} // namespace ncnn

#include "layer/fold.h"
namespace ncnn {
class Fold_final : virtual public Fold
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Fold::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Fold::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Fold_final)
} // namespace ncnn

#include "layer/unfold.h"
namespace ncnn {
class Unfold_final : virtual public Unfold
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Unfold::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Unfold::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Unfold_final)
} // namespace ncnn

#include "layer/gridsample.h"
#include "layer/x86/gridsample_x86.h"
namespace ncnn {
class GridSample_final : virtual public GridSample, virtual public GridSample_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = GridSample::create_pipeline(opt); if (ret) return ret; }
        { int ret = GridSample_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = GridSample_x86::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = GridSample::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(GridSample_final)
} // namespace ncnn

#include "layer/gridsample.h"
#include "layer/x86/gridsample_x86_avx512.h"
namespace ncnn {
class GridSample_final_avx512 : virtual public GridSample, virtual public GridSample_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = GridSample::create_pipeline(opt); if (ret) return ret; }
        { int ret = GridSample_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = GridSample_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = GridSample::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(GridSample_final_avx512)
} // namespace ncnn

#include "layer/gridsample.h"
#include "layer/x86/gridsample_x86_fma.h"
namespace ncnn {
class GridSample_final_fma : virtual public GridSample, virtual public GridSample_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = GridSample::create_pipeline(opt); if (ret) return ret; }
        { int ret = GridSample_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = GridSample_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = GridSample::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(GridSample_final_fma)
} // namespace ncnn

#include "layer/gridsample.h"
#include "layer/x86/gridsample_x86_avx.h"
namespace ncnn {
class GridSample_final_avx : virtual public GridSample, virtual public GridSample_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = GridSample::create_pipeline(opt); if (ret) return ret; }
        { int ret = GridSample_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = GridSample_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = GridSample::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(GridSample_final_avx)
} // namespace ncnn

#include "layer/cumulativesum.h"
namespace ncnn {
class CumulativeSum_final : virtual public CumulativeSum
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = CumulativeSum::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = CumulativeSum::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(CumulativeSum_final)
} // namespace ncnn

#include "layer/copyto.h"
namespace ncnn {
class CopyTo_final : virtual public CopyTo
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = CopyTo::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = CopyTo::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(CopyTo_final)
} // namespace ncnn

#include "layer/erf.h"
#include "layer/vulkan/erf_vulkan.h"
namespace ncnn {
class Erf_final : virtual public Erf, virtual public Erf_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Erf::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = Erf_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (vkdev) { int ret = Erf_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Erf::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Erf_final)
} // namespace ncnn

#include "layer/diag.h"
namespace ncnn {
class Diag_final : virtual public Diag
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Diag::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Diag::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Diag_final)
} // namespace ncnn

#include "layer/celu.h"
#include "layer/vulkan/celu_vulkan.h"
namespace ncnn {
class CELU_final : virtual public CELU, virtual public CELU_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = CELU::create_pipeline(opt); if (ret) return ret; }
        if (vkdev) { int ret = CELU_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (vkdev) { int ret = CELU_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = CELU::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(CELU_final)
} // namespace ncnn

#include "layer/shrink.h"
namespace ncnn {
class Shrink_final : virtual public Shrink
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Shrink::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Shrink::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Shrink_final)
} // namespace ncnn


